// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel WaveKernel
#pragma kernel WaveToDoubleWaveKernel
#pragma kernel WaveToTripleWaveKernel
#pragma kernel WaveToRippleKernel
#pragma kernel WaveToSphereKernel
#pragma kernel WaveToTwistedSphereKernel
#pragma kernel WaveToTorusKernel
#pragma kernel WaveToTwistedTorusKernel

#pragma kernel DoubleWaveToWaveKernel
#pragma kernel DoubleWaveKernel
#pragma kernel DoubleWaveToTripleWaveKernel
#pragma kernel DoubleWaveToRippleKernel
#pragma kernel DoubleWaveToSphereKernel
#pragma kernel DoubleWaveToTwistedSphereKernel
#pragma kernel DoubleWaveToTorusKernel
#pragma kernel DoubleWaveToTwistedTorusKernel

#pragma kernel TripleWaveToWaveKernel
#pragma kernel TripleWaveToDoubleWaveKernel
#pragma kernel TripleWaveKernel
#pragma kernel TripleWaveToRippleKernel
#pragma kernel TripleWaveToSphereKernel
#pragma kernel TripleWaveToTwistedSphereKernel
#pragma kernel TripleWaveToTorusKernel
#pragma kernel TripleWaveToTwistedTorusKernel

#pragma kernel RippleToWaveKernel
#pragma kernel RippleToDoubleWaveKernel
#pragma kernel RippleToTripleWaveKernel
#pragma kernel RippleKernel
#pragma kernel RippleToSphereKernel
#pragma kernel RippleToTwistedSphereKernel
#pragma kernel RippleToTorusKernel
#pragma kernel RippleToTwistedTorusKernel

#pragma kernel SphereToWaveKernel
#pragma kernel SphereToDoubleWaveKernel
#pragma kernel SphereToTripleWaveKernel
#pragma kernel SphereToRippleKernel
#pragma kernel SphereKernel
#pragma kernel SphereToTwistedSphereKernel
#pragma kernel SphereToTorusKernel
#pragma kernel SphereToTwistedTorusKernel

#pragma kernel TwistedSphereToWaveKernel
#pragma kernel TwistedSphereToDoubleWaveKernel
#pragma kernel TwistedSphereToTripleWaveKernel
#pragma kernel TwistedSphereToRippleKernel
#pragma kernel TwistedSphereToSphereKernel
#pragma kernel TwistedSphereKernel
#pragma kernel TwistedSphereToTorusKernel
#pragma kernel TwistedSphereToTwistedTorusKernel

#pragma kernel TorusToWaveKernel
#pragma kernel TorusToDoubleWaveKernel
#pragma kernel TorusToTripleWaveKernel
#pragma kernel TorusToRippleKernel
#pragma kernel TorusToSphereKernel
#pragma kernel TorusToTwistedSphereKernel
#pragma kernel TorusKernel
#pragma kernel TorusToTwistedTorusKernel

#pragma kernel TwistedTorusToWaveKernel
#pragma kernel TwistedTorusToDoubleWaveKernel
#pragma kernel TwistedTorusToTripleWaveKernel
#pragma kernel TwistedTorusToRippleKernel
#pragma kernel TwistedTorusToSphereKernel
#pragma kernel TwistedTorusToTwistedSphereKernel
#pragma kernel TwistedTorusToTorusKernel
#pragma kernel TwistedTorusKernel

RWStructuredBuffer<float3> _positions;

uint _resolution;

float _step, _time, _transitionProgress;

float2 GetUV(uint3 id)
{
    return (id.xy + 0.5) * _step - 1.0;
}

void SetPosition(uint3 id, float3 position)
{
    if (id.x < _resolution && id.y < _resolution)
    {
        _positions[id.x + id.y * _resolution] = position;
    }
}

#define PI 3.14159265358979323846

float3 Wave(float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.y = sin(PI * (u + v + t));
    p.z = v;
    return p;
}

float3 DoubleWave(float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.y = sin(PI * (u + 0.5 * t));
    p.y += 0.5 * sin(2.0 * PI * (v + t));
    p.y *= (2.0f / 3.0f);
    p.z = v;
    return p;
}

float3 TripleWave(float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.y = sin(PI * (u + 0.5 * t));
    p.y += 0.5 * sin(2.0 * PI * (v + t));
    p.y += sin(PI * (u + v + t * 0.25));
    p.y *= 0.4;
    p.z = v;
    return p;
}

float3 Ripple(float u, float v, float t)
{
    float d = sqrt(u * u + v * v);
    float3 p;
    p.x = u;
    p.y = sin(PI * (4.0 * d - t));
    p.y /= (1.0 + 10.0 * d);
    p.z = v;
    return p;
}

float3 Sphere(float u, float v, float t)
{
    float r = 0.5 + 0.5 * sin(PI * t);
    float s = r * cos(0.5 * PI * v);
    float3 p;
    p.x = s * sin(PI * u);
    p.y = r * sin(0.5 * PI * v);
    p.z = s * cos(PI * u);
    return p;
}

float3 TwistedSphere(float u, float v, float t)
{
    float r = 0.9 + 0.1 * sin(PI * (12.0 * u + 8.0 * v + t));
    float s = r * cos(0.5 * PI * v);
    float3 p;
    p.x = s * sin(PI * u);
    p.y = r * sin(0.5 * PI * v);
    p.z = s * cos(PI * u);
    return p;
}

float3 Torus(float u, float v, float t)
{
    float r1 = 0.5 + 0.25 * sin(PI * t);
    float r2 = 0.25;
    float s = r1 + r2 * cos(PI * v);
    float3 p;
    p.x = s * sin(PI * u);
    p.y = r2* sin(PI * v);
    p.z = s * cos(PI * u);
    return p;
}

float3 TwistedTorus(float u, float v, float t)
{
    float r1 = 0.7 + 0.1 * sin(PI * (8.0 * u + 0.5 * t));
    float r2 = 0.15 + 0.05 * sin(PI * (16.0 * u + 8.0 * v + 3.0 * t));
    float s = r1 + r2 * cos(PI * v);
    float3 p;
    p.x = s * sin(PI * u);
    p.y = r2* sin(PI * v);
    p.z = s * cos(PI * u);
    return p;
}

#define KERNEL_FUNCTION(function) \
[numthreads(8, 8, 1)] \
void function##Kernel(uint3 id: SV_DispatchThreadID) \
{ \
    float2 uv = GetUV(id); \
    SetPosition(id, function(uv.x, uv.y, _time)); \
}

#define KERNEL_MORPH_FUNCTION(functionA, functionB) \
[numthreads(8, 8, 1)] \
void functionA##To##functionB##Kernel(uint3 id: SV_DispatchThreadID) \
{ \
float2 uv = GetUV(id); \
float3 position = lerp(functionA(uv.x, uv.y, _time), functionB(uv.x, uv.y, _time), _transitionProgress); \
SetPosition(id, position); \
}

KERNEL_FUNCTION(Wave)
KERNEL_FUNCTION(DoubleWave)
KERNEL_FUNCTION(TripleWave)
KERNEL_FUNCTION(Ripple)
KERNEL_FUNCTION(Sphere)
KERNEL_FUNCTION(TwistedSphere)
KERNEL_FUNCTION(Torus)
KERNEL_FUNCTION(TwistedTorus)

KERNEL_MORPH_FUNCTION(Wave, DoubleWave)
KERNEL_MORPH_FUNCTION(Wave, TripleWave)
KERNEL_MORPH_FUNCTION(Wave, Ripple)
KERNEL_MORPH_FUNCTION(Wave, Sphere)
KERNEL_MORPH_FUNCTION(Wave, TwistedSphere)
KERNEL_MORPH_FUNCTION(Wave, Torus)
KERNEL_MORPH_FUNCTION(Wave, TwistedTorus)

KERNEL_MORPH_FUNCTION(DoubleWave, Wave)
KERNEL_MORPH_FUNCTION(DoubleWave, TripleWave)
KERNEL_MORPH_FUNCTION(DoubleWave, Ripple)
KERNEL_MORPH_FUNCTION(DoubleWave, Sphere)
KERNEL_MORPH_FUNCTION(DoubleWave, TwistedSphere)
KERNEL_MORPH_FUNCTION(DoubleWave, Torus)
KERNEL_MORPH_FUNCTION(DoubleWave, TwistedTorus)

KERNEL_MORPH_FUNCTION(TripleWave, Wave)
KERNEL_MORPH_FUNCTION(TripleWave, DoubleWave)
KERNEL_MORPH_FUNCTION(TripleWave, Ripple)
KERNEL_MORPH_FUNCTION(TripleWave, Sphere)
KERNEL_MORPH_FUNCTION(TripleWave, TwistedSphere)
KERNEL_MORPH_FUNCTION(TripleWave, Torus)
KERNEL_MORPH_FUNCTION(TripleWave, TwistedTorus)

KERNEL_MORPH_FUNCTION(Ripple, Wave)
KERNEL_MORPH_FUNCTION(Ripple, DoubleWave)
KERNEL_MORPH_FUNCTION(Ripple, TripleWave)
KERNEL_MORPH_FUNCTION(Ripple, Sphere)
KERNEL_MORPH_FUNCTION(Ripple, TwistedSphere)
KERNEL_MORPH_FUNCTION(Ripple, Torus)
KERNEL_MORPH_FUNCTION(Ripple, TwistedTorus)

KERNEL_MORPH_FUNCTION(Sphere, Wave)
KERNEL_MORPH_FUNCTION(Sphere, DoubleWave)
KERNEL_MORPH_FUNCTION(Sphere, TripleWave)
KERNEL_MORPH_FUNCTION(Sphere, Ripple)
KERNEL_MORPH_FUNCTION(Sphere, TwistedSphere)
KERNEL_MORPH_FUNCTION(Sphere, Torus)
KERNEL_MORPH_FUNCTION(Sphere, TwistedTorus)

KERNEL_MORPH_FUNCTION(TwistedSphere, Wave)
KERNEL_MORPH_FUNCTION(TwistedSphere, DoubleWave)
KERNEL_MORPH_FUNCTION(TwistedSphere, TripleWave)
KERNEL_MORPH_FUNCTION(TwistedSphere, Ripple)
KERNEL_MORPH_FUNCTION(TwistedSphere, Sphere)
KERNEL_MORPH_FUNCTION(TwistedSphere, Torus)
KERNEL_MORPH_FUNCTION(TwistedSphere, TwistedTorus)

KERNEL_MORPH_FUNCTION(Torus, Wave)
KERNEL_MORPH_FUNCTION(Torus, DoubleWave)
KERNEL_MORPH_FUNCTION(Torus, TripleWave)
KERNEL_MORPH_FUNCTION(Torus, Ripple)
KERNEL_MORPH_FUNCTION(Torus, Sphere)
KERNEL_MORPH_FUNCTION(Torus, TwistedSphere)
KERNEL_MORPH_FUNCTION(Torus, TwistedTorus)

KERNEL_MORPH_FUNCTION(TwistedTorus, Wave)
KERNEL_MORPH_FUNCTION(TwistedTorus, DoubleWave)
KERNEL_MORPH_FUNCTION(TwistedTorus, TripleWave)
KERNEL_MORPH_FUNCTION(TwistedTorus, Ripple)
KERNEL_MORPH_FUNCTION(TwistedTorus, Sphere)
KERNEL_MORPH_FUNCTION(TwistedTorus, TwistedSphere)
KERNEL_MORPH_FUNCTION(TwistedTorus, Torus)